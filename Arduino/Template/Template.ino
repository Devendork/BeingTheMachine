//// Values generated for Filename: Bunny_9mm_more.gcode
//// Material Diameter 9
//// Material Height13
//////////////////
//Laura Devendorf
//Being the Mahcine
//Arduino Uno Code for Guided 3D Printing
//Generated: 8/6/14
////////////////

#include <Servo.h>
#include <avr/pgmspace.h>

///**BEGIN INSERTED VALUES/////
int inst_num = 1845;
const PROGMEM uint8_t xs[] = {38,88,90,94,97,99,102,103,104,107,108,110,111,113,116,119,128,119,118,116,115,113,107,106,104,104,100,97,96,91,85,87,89,88,77,76,75,68,78,80,81,83,83,84,88,94,95,96,99,101,102,103,105,106,108,109,110,112,113,115,117,123,124,125,127,129,132,135,138,141,143,147,148,149,150,150,149,148,147,142,140,138,136,133,132,130,127,126,126,125,125,125,125,126,119,117,116,113,111,110,109,107,105,103,101,101,99,98,96,95,93,91,90,89,87,86,81,80,79,79,77,76,75,73,63,74,76,77,77,77,99,99,95,91,90,88,84,85,85,85,85,85,86,86,89,89,90,92,94,95,97,100,102,103,110,113,116,117,119,120,121,122,122,123,124,126,127,129,130,133,135,140,135,133,133,132,131,130,130,129,128,128,127,125,122,121,119,118,116,115,112,109,104,101,97,91,90,88,85,83,82,80,79,78,76,72,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,75,77,78,79,80,81,83,84,85,86,87,89,92,94,96,97,100,104,105,106,107,108,111,114,116,118,119,121,122,123,124,125,126,127,128,128,129,130,131,132,133,134,137,138,140,141,141,142,143,144,146,149,150,152,153,156,157,158,158,157,155,151,150,148,147,146,145,144,144,143,142,141,141,140,139,138,138,138,137,137,136,135,134,132,131,130,129,128,125,124,124,123,122,120,119,119,117,115,114,113,112,109,108,106,105,101,101,100,100,98,95,93,95,93,92,90,88,87,86,84,83,80,79,78,76,74,72,70,68,66,65,64,61,61,65,66,67,68,70,73,75,77,80,81,83,85,86,88,89,91,92,98,104,107,109,110,112,114,118,119,120,121,122,124,125,127,129,132,133,135,137,138,142,140,139,139,138,138,137,136,135,135,133,131,130,127,120,118,115,112,107,102,101,100,98,96,90,88,87,86,84,83,82,80,78,77,75,74,72,69,68,66,65,64,62,61,59,58,55,54,53,51,51,50,50,50,49,49,49,49,49,49,50,50,50,54,55,56,57,58,59,60,61,62,63,65,66,67,69,70,73,76,78,80,81,83,84,85,90,91,92,95,98,99,101,102,103,104,107,109,111,112,114,116,119,121,123,124,125,126,127,128,129,131,132,132,134,136,137,140,141,143,144,145,145,146,148,149,150,151,152,153,154,165,167,165,155,154,153,153,151,150,150,149,149,148,147,146,145,145,144,144,143,142,141,140,139,138,136,135,134,133,132,130,128,128,126,122,119,117,116,114,112,111,110,108,106,105,103,100,98,97,95,94,94,93,92,90,92,88,91,92,93,95,97,98,99,101,106,108,110,113,115,116,118,123,124,125,127,128,129,131,133,134,135,137,138,138,140,142,142,143,144,144,144,143,143,142,141,139,138,137,137,136,135,133,131,129,127,126,123,120,117,116,114,113,112,108,102,101,98,97,96,93,92,90,88,86,84,81,79,77,74,71,70,68,63,60,58,54,53,53,52,53,55,58,61,62,64,65,67,70,72,73,76,77,79,84,86,80,83,85,86,87,89,90,91,93,96,100,102,103,106,107,109,110,111,115,117,119,120,121,124,125,126,127,129,130,131,132,133,134,135,137,138,139,140,142,144,145,146,147,147,150,150,151,152,153,154,154,155,155,156,156,156,156,156,156,156,156,155,155,155,154,153,153,151,151,150,149,148,147,146,145,145,144,143,141,138,137,136,134,132,131,128,127,126,123,121,120,119,116,114,113,112,111,109,107,106,101,98,97,97,96,94,93,90,89,88,86,85,84,83,82,80,79,77,76,74,73,72,71,70,70,68,65,64,63,61,59,58,57,54,52,51,50,49,48,47,45,44,42,42,42,41,41,41,41,40,39,39,39,39,40,40,41,41,42,42,43,44,45,45,47,47,48,49,51,53,54,55,56,59,60,61,64,65,67,68,70,71,72,73,75,76,78,78,78,66,66,66,67,68,69,70,72,74,77,80,82,83,85,86,87,89,91,93,96,99,103,105,109,114,120,122,124,126,130,132,134,135,137,138,140,141,142,143,143,145,145,145,145,145,144,142,142,141,140,139,137,134,131,129,127,126,123,122,121,120,119,118,115,112,108,106,105,104,103,99,97,96,95,92,91,88,85,84,82,80,77,76,73,72,70,66,63,62,60,58,57,56,54,53,52,52,51,50,50,49,48,46,49,51,53,53,54,55,57,60,62,64,65,67,68,69,71,72,73,75,77,79,80,81,84,86,87,90,91,92,95,96,97,98,99,103,104,106,110,112,113,114,116,117,119,121,123,125,126,127,128,129,131,132,134,136,137,138,140,141,143,144,146,148,149,150,151,152,152,153,154,155,155,156,157,158,158,158,158,157,157,156,156,154,153,153,152,151,149,148,148,146,145,144,143,142,141,139,137,136,135,133,132,130,129,128,127,126,124,123,122,120,119,118,112,107,106,104,103,102,101,100,98,97,96,95,94,92,90,88,87,86,84,83,81,79,78,77,76,74,72,71,70,68,67,66,65,64,63,62,61,60,60,59,58,56,55,54,52,50,49,46,45,43,42,42,41,41,40,40,39,38,37,37,35,34,34,33,34,34,35,35,36,37,37,38,40,42,43,44,46,47,48,51,53,54,55,58,59,61,63,65,62,62,53,52,52,51,51,44,54,57,59,61,62,64,66,69,72,75,78,81,82,84,87,90,92,94,95,98,101,104,107,108,111,116,118,121,124,126,129,131,132,132,133,134,138,142,143,143,143,143,144,139,137,134,133,128,126,123,122,119,118,117,115,114,113,110,107,105,103,102,101,99,97,95,93,91,88,86,84,81,79,78,76,74,72,70,69,67,65,64,60,58,56,54,46,46,45,43,43,42,41,40,38,37,36,36,35,35,35,35,34,34,34,35,35,35,36,36,37,38,40,41,42,43,45,46,47,49,50,51,52,55,56,58,59,60,61,63,65,66,69,70,71,72,74,75,77,79,80,81,82,84,85,87,88,90,91,94,95,97,100,101,102,107,111,112,114,115,118,119,121,122,124,126,127,127,131,133,135,136,137,139,139,140,141,143,144,145,146,147,149,149,151,153,153,154,154,155,156,156,156,157,157,157,157,157,156,155,154,153,152,151,149,149,147,146,145,144,141,138,136,135,133,131,130,128,126,125,123,122,120,119,117,115,114,113,112,111,109,107,106,104,103,102,101,100,98,96,94,93,91,89,88,83,81,80,79,77,76,75,74,72,71,70,69,67,66,65,64,62,61,59,58,55,53,52,51,49,48,60,72,72,92,128,128,136,136,135,131,127,125,124,121,118,115,113,111,93,90,108,110,111,112,119,122,127,128,130,130,135,135,67,64,47,46,44,43,41,31,35,50,51,65,67,69,70,71,73,74,75,76,78,82,86,91,94,96,100,102,102,104,108,108,110,112,113,114,116,118,119,120,121,122,123,129,130,131,133,134,135,136,138,140,141,142,143,145,145,146,147,147,148,148,149,149,150,150,149,149,149,149,148,148,147,147,146,145,144,143,142,140,139,136,133,127,126,124,123,121,119,115,113,111,110,107,103,102,100,99,98,97,96,94,93,92,88,86,84,82,81,80,79,78,77,76,74,72,71,70,67,66,62,61,57,56,55,54,53,52,50,49,48,47,44,42,41,40,37,35,34,33,32,31,30,29,27,26,26,25,24,24,23,23,23,23,23,24,24,25,25,25,25,24,24,23,30,32,34,40,45,46,47,48,48,49,51,51,53,54,55,56,57,57,59,60,61,62,62,63,64,65,65,76,84,84,76,82,73,73,65,65,63,62,60,59,58,57,55,54,53,52,51,50,49,45,44,42,41,38,37,34,33,31,29,29,28,26,25,25,24,23,23,23,23,23,24,24,24,25,24,24,24,24,25,25,26,26,27,28,33,38,39,41,41,42,44,44,46,50,52,56,57,60,62,63,63,64,64,65,66,67,67,67,67,67,67,67,67,66,52,38,38,45,45,46,47,51,52,52,53,54,55,56,57,58,59,60,60,60,61,61,61,63,56,56,54,54,52,45,40,39,37,36,35,34,33,32,31,28,27,26,25,24,23,23,22,21,21,21,21,20,20,21,21,22,22,23,23,24,26,27,28,29,30,35,38,39,43,43,44,45,40,63,68,92,60,78,100,102,98,93,94,106};
const PROGMEM uint8_t ys[] = {54,78,75,72,73,74,74,74,75,75,75,75,75,75,75,77,82,88,91,92,96,100,102,102,102,103,103,104,104,105,96,92,86,79,82,80,79,72,70,69,68,67,66,66,59,60,61,61,62,62,63,63,63,63,64,64,64,64,64,63,62,66,67,67,69,69,70,70,70,71,72,74,76,78,81,84,86,88,89,93,94,94,94,94,94,95,97,98,99,101,103,104,105,112,112,112,112,112,112,113,113,114,114,114,114,115,115,115,116,116,117,117,117,117,117,116,116,111,108,107,104,103,102,101,95,91,88,87,85,84,92,92,100,98,98,97,95,91,90,88,85,84,82,80,78,77,76,74,73,72,72,71,70,70,67,69,70,71,71,72,72,72,73,73,74,74,75,76,76,77,78,82,88,91,92,93,94,95,96,97,99,100,101,103,104,104,105,105,106,106,107,108,106,103,101,111,111,110,108,107,107,106,105,105,103,101,97,96,95,92,90,89,88,87,86,85,84,82,80,79,78,73,71,71,70,69,69,67,66,65,65,63,62,61,60,60,59,59,57,56,56,56,56,56,56,57,58,59,60,60,61,61,61,62,62,62,63,63,64,64,64,65,65,66,67,68,68,69,69,70,71,72,73,73,74,74,76,76,80,84,88,89,91,91,92,93,94,94,95,96,97,99,100,101,102,103,104,105,106,106,107,108,109,110,113,113,114,114,114,115,115,116,116,116,117,117,118,118,118,119,119,119,120,120,120,120,118,117,117,116,115,113,112,103,102,101,100,99,98,98,97,97,97,96,96,96,96,96,97,97,96,96,96,93,86,84,84,83,82,82,81,80,79,78,78,77,76,75,75,74,73,71,67,62,63,64,64,64,65,65,66,67,67,68,69,70,72,73,74,74,75,77,80,84,87,90,91,93,94,95,96,98,100,101,103,104,107,109,109,110,112,114,109,108,107,105,103,114,113,112,111,111,110,109,109,108,108,108,108,108,109,109,109,109,108,108,107,106,106,104,103,102,101,100,99,98,96,95,94,90,88,87,86,84,81,77,76,75,75,75,74,74,73,73,72,71,71,71,70,70,69,68,67,66,65,65,64,63,62,58,57,56,54,52,51,51,51,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,58,59,60,60,61,62,63,63,64,65,66,67,68,69,71,72,74,75,75,76,77,77,79,80,81,88,89,89,90,92,94,96,97,99,100,102,104,105,106,107,108,108,109,110,111,112,113,115,116,117,118,119,119,119,120,120,120,121,122,123,124,124,125,125,125,125,126,126,126,123,121,119,118,117,117,115,90,82,74,72,71,70,69,67,66,65,63,62,62,62,62,63,63,64,64,64,64,66,66,67,68,69,70,71,73,73,74,75,77,79,82,83,86,88,89,92,94,96,101,101,102,103,103,104,105,106,107,108,108,110,110,111,112,113,113,114,115,110,109,107,106,106,105,104,104,103,103,103,103,103,103,104,105,105,105,104,104,101,96,93,92,88,84,82,79,78,77,77,77,77,77,77,78,77,77,77,76,74,64,62,61,60,59,58,57,57,54,49,50,50,50,49,49,49,50,49,49,50,51,51,52,52,52,52,52,53,53,53,54,55,55,56,57,58,59,59,61,63,63,64,65,66,67,68,69,70,72,73,75,78,79,81,83,84,85,86,89,90,91,92,93,94,98,99,100,102,103,104,107,109,110,111,111,112,113,114,115,116,117,118,118,119,120,121,122,122,123,123,124,124,125,126,127,127,128,129,129,129,131,125,123,122,121,119,118,117,116,116,116,116,116,116,115,115,115,116,116,117,117,117,117,117,118,117,117,117,117,117,117,116,116,114,113,112,111,109,108,107,106,105,104,101,100,99,97,96,94,92,91,90,87,85,85,84,83,81,79,78,77,76,75,74,73,72,71,71,70,68,67,67,66,65,65,65,64,64,64,65,65,65,65,65,65,65,64,94,94,91,91,78,78,78,78,78,78,78,78,77,77,76,76,75,75,74,73,73,72,71,68,66,62,63,63,64,65,66,67,68,68,69,70,71,72,74,75,77,78,84,85,87,91,92,94,96,97,98,99,101,102,103,104,105,106,107,108,109,110,110,111,111,112,111,109,108,108,107,107,107,106,106,106,106,106,106,107,106,107,106,107,107,107,107,108,108,107,106,105,104,104,104,102,101,101,100,99,98,96,96,94,87,84,83,81,80,79,78,77,77,77,78,78,65,65,66,66,66,66,65,65,64,64,63,62,62,61,61,60,60,58,57,56,55,52,51,51,50,48,49,49,50,50,50,50,50,50,51,51,52,53,54,55,55,55,55,56,56,57,57,59,59,61,62,64,64,66,67,68,69,71,72,73,74,79,80,82,84,88,92,95,97,99,102,102,103,105,106,108,109,110,111,112,112,113,113,114,115,115,115,116,117,118,119,120,120,121,122,123,123,123,124,125,125,128,123,122,120,120,120,120,120,119,119,119,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,120,120,119,119,118,117,117,116,116,115,115,112,111,110,109,108,107,106,106,105,103,101,100,99,95,93,91,89,84,83,82,81,80,78,77,76,75,73,72,71,69,69,68,65,65,65,64,64,64,63,64,65,92,92,98,97,96,95,94,85,83,82,82,81,81,81,81,80,81,81,82,81,81,80,79,78,77,77,76,76,74,73,71,70,68,70,70,71,71,71,71,72,72,73,73,74,76,77,83,84,85,88,92,95,97,97,98,99,100,101,101,102,102,103,103,103,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,106,106,106,106,105,105,104,103,101,100,99,110,109,108,107,106,105,104,102,100,99,97,94,92,91,90,89,88,85,84,83,81,79,79,78,75,74,73,72,72,71,71,71,71,71,70,70,70,69,69,69,68,68,68,68,68,68,67,67,68,68,68,68,68,68,68,67,67,66,66,65,65,64,64,63,62,61,60,59,59,56,55,55,55,56,57,57,58,58,58,58,58,57,57,58,59,59,60,61,62,62,62,63,64,64,65,65,66,67,68,71,72,73,74,76,80,82,83,84,87,89,90,94,96,98,101,101,102,104,104,105,105,107,107,108,109,110,111,111,112,112,112,113,114,114,115,115,115,116,116,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,118,118,118,117,117,116,115,114,113,113,111,111,91,97,97,91,86,86,84,88,90,96,95,95,95,95,95,96,96,96,101,94,82,81,80,79,74,75,76,76,76,77,79,82,93,99,97,96,96,95,94,77,74,83,84,92,77,77,78,78,77,77,77,77,77,77,77,76,75,74,71,70,69,68,66,65,63,62,62,61,60,60,60,60,61,61,61,62,62,62,63,63,64,65,65,66,66,67,67,69,70,71,72,73,76,77,79,81,83,84,86,88,91,92,93,95,95,97,99,100,101,103,105,108,109,110,110,109,109,109,109,109,109,109,110,111,111,113,111,110,110,110,109,109,109,110,110,110,111,111,112,113,113,113,113,114,114,114,114,114,114,113,112,112,111,110,110,110,110,110,111,111,111,111,111,111,110,110,109,109,107,106,106,105,104,104,101,100,97,96,95,93,89,88,87,86,85,84,83,82,80,78,77,75,73,71,69,63,61,61,59,55,60,63,64,65,66,66,67,68,69,69,70,71,71,72,73,73,74,74,75,75,76,76,77,93,87,87,93,99,104,104,101,103,105,107,108,108,109,110,110,111,111,111,111,111,111,112,111,111,110,109,108,107,106,104,103,102,101,98,95,93,93,89,88,86,85,82,80,78,74,71,69,67,65,64,63,62,61,60,59,58,54,59,60,63,64,65,66,67,68,69,70,73,74,75,76,79,80,81,82,84,86,87,89,91,92,93,94,95,97,99,96,79,79,70,71,72,72,74,77,78,80,81,81,83,84,85,87,89,91,92,94,95,96,104,106,107,107,108,109,117,111,110,109,109,107,106,105,104,103,100,98,97,95,93,92,91,89,88,87,86,84,83,81,79,78,76,75,73,72,70,67,66,65,64,63,61,64,64,67,68,95,96,113,162,167,122,103,116,134,140,142,115,132,146};
const PROGMEM uint8_t ls[] = {0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,0,1,1,1,0,1,1};
const PROGMEM uint8_t bx[] = {38,161,161,38};
const PROGMEM uint8_t by[] = {54,54,145,145};
const PROGMEM uint16_t layers[] = {2,133,334,581,872,1175,1458,1682,1765,1834,1839,1843,1846,0};
///**END INSERTED VALUES/////


//ENVIRONMENT VARS
int lastms_x = 100;
int lastms_y = 100;
int last_laser = false;
int i_num = 0;
boolean playing = false;
boolean playing_bounds = false;
int rate = 50;
int velocity = 100;
int cur_layer = 0;


//INPUT
const int next = 4; 
const int play = 2; 
const int prev = 5; 
const int bounds = 3; 
const int num_buttons = 4;
int buttonState = 0;
int low_count[num_buttons];
boolean flags[num_buttons];
boolean interrupt = false;

//OUTPUT
const int speaker = 13;
int tones[] = {261, 277, 294, 311, 330, 349, 370, 392, 415, 440};


//LASER PARAMS
int fast_blink = 50;
int slow_blink = 100;
int ison = 0;
const int laser = 8;



//SERVO PARAMS
int minPulse = 1400;
Servo servo_x;
Servo servo_y;


void setup()
{

  // Attach each Servo object to a digital pin
  servo_x.attach(9, 600, 2400);
  servo_y.attach(10, 600, 2400);


  for (int i =  0; i < num_buttons; i++) {
    low_count[i] = 0;
  }

  pinMode(next, INPUT);
  pinMode(prev, INPUT);
  pinMode(play, INPUT);
  pinMode(laser, OUTPUT);

  centerServos();
  Serial.begin(9600);
}



void centerServos() {
  digitalWrite(laser, LOW);
  servo_x.writeMicroseconds(1500);
  servo_y.writeMicroseconds(1500);
}

void signalEnd() {
  for (int i = 0; i < 10; i++) {
    digitalWrite(laser, LOW);
    myDelay(fast_blink);
    digitalWrite(laser, HIGH);
    myDelay(slow_blink);
  }
}

void signalPath() {
    for(int i = 0; i < 2; i++){
     tone(speaker, tones[4]);
     delay(100);
     noTone(speaker);
     delay(800);
    }

  for (int i = 0; i < 4; i++) {
    digitalWrite(laser, LOW);
    myDelay(slow_blink);
    digitalWrite(laser, HIGH);
    myDelay(slow_blink);
  }
}


void signalLayer(boolean up) {
  Serial.println("Signal Layer");
  if (up) {
    for (int i = 6; i < 10; i++)
    {
      tone(speaker, tones[i]);
      delay(100);
    }
  } else {
    for (int i = 9; i == 6; i--)
    {
      tone(speaker, tones[i]);
      delay(100);
    }
  }
  noTone(speaker);
  delay(800);
}

//update this to read actual bounds
void moveToBound() {
  unsigned int x = 0;
  unsigned int y = 0;
  int counter = 0;
  int index;

  while (!interrupt) {
    counter++;
    index = counter % 4;
    x = pgm_read_byte_near(bx + index);
    y = pgm_read_byte_near(by + index);
    
    servo_x.writeMicroseconds(minPulse+x);
    servo_y.writeMicroseconds(minPulse+y);
    myDelay(1000);
  }

}

int distance(int x, int y) {
  return sqrt(x * x  + y * y);
}

void myDelay(int time) {
  int i = 0;
  boolean hasValue = false;
  while (i < time) {
    if (!interrupt) checkFob();
    i += rate;
  }
}

void moveTo(boolean forward, boolean smooth, int velocity) {
  Serial.println(i_num);

  unsigned int lval = pgm_read_byte_near(ls + i_num);
  unsigned int xval = pgm_read_byte_near(xs + i_num);
  unsigned int yval = pgm_read_byte_near(ys + i_num);
  unsigned  layer_val = pgm_read_word_near(layers + cur_layer);


  if (forward && layer_val != 0 && layer_val == i_num) {
    signalLayer(true);
    cur_layer++;
  }

  if (!forward && layer_val != 0 && layer_val == (i_num + 1)) {
    signalLayer(false);
    cur_layer--;
  }


  int dist = distance(xval - lastms_x, yval - lastms_y);

  if (i_num > 0 && last_laser == 0 && lval == 1) {
    signalPath();
    digitalWrite(laser, LOW);

    //hold at this step
    if (forward) i_num--;
    else i_num++;
    last_laser = lval;
    return;
  }

  if (lval == 1) digitalWrite(laser, LOW);
  else digitalWrite(laser, HIGH);


  if (!smooth || lval == 0) {
    servo_x.writeMicroseconds(xval + minPulse);
    servo_y.writeMicroseconds(yval + minPulse);
    if (lval == 0 && smooth) myDelay(2000);
    else myDelay(100);
  } else {

    int dx = lastms_x - xval;
    dx = abs(dx); //arduino doesn't like subtraction in absolute value brackets
    int dy = lastms_y - yval;
    dy = abs(dy);
    int x_step = 1;
    int y_step = 1;

    if (lastms_x > xval) x_step = -1;
    if (lastms_y > xval) y_step = -1;

    int max_d = dx;
    if (dx < dy) max_d = dy;

    //    for (int i = 0; i < max_d; i++) {
    //      if (i < dx) servo_x.writeMicroseconds(minPulse + lastms_x + i * x_step);
    //      if (i < dy) servo_y.writeMicroseconds(minPulse + lastms_y + i * y_step);
    //      delay(velocity);
    //    }

    servo_x.writeMicroseconds(xval + minPulse);
    servo_y.writeMicroseconds(yval + minPulse);
    myDelay(velocity * max_d);
  }

  lastms_x = xval;
  lastms_y = yval;
  last_laser = lval;


}


void advanceIndex() {
//    tone(speaker, tones[9]);
//    delay(20);
//    noTone(speaker);

  if (i_num < inst_num - 1) {
    ++i_num;
  } else {
    signalEnd();
  }
}

void retractIndex() {
  if (i_num > 0) {
    --i_num;
  } else {
    signalEnd();
  }
}

void checkFob() {

  delay(rate);
  int states[num_buttons];
  int reset = 400;
  int setValue = false;
  states[0] = digitalRead(next);
  states[1] = digitalRead(prev);
  states[2] = digitalRead(play);
  states[3] = digitalRead(bounds);
  

  for (int i = 0; i < num_buttons; i++) {
    if (states[i] == 1) {
      if (low_count[i] == 0) {
        flags[i] = true;
        interrupt = true;
      } else if (low_count[i] == reset) {
        low_count[i] = 0;
      } else {
        low_count[i]++;
      }


    } else {
      low_count[i] = 0;
    }
  }
}

void checkButtons() {


  delay(rate);
  int states[num_buttons];
  int reset = 200;
  int setValue = false;
  states[0] = analogRead(next);
  states[1] = analogRead(prev);
  states[2] = analogRead(play);
  int lowest = 0;
  int low_val = states[0];

  //get the lowest value of the buttons
  for (int i = 1; i < num_buttons; i++) {
    if (states[i] < low_val) {
      low_val = states[i];
      lowest = i;
    }
  }

  for (int i = 0; i < num_buttons; i++) {
    if (i == lowest && low_val < 1) {

      if (low_count[i] == 0) {
        flags[i] = true;
        interrupt = true;
      } else if (low_count[i] == reset) {
        low_count[i] = 0;
      }
      low_count[i]++;


    } else {
      low_count[i] = 0;
    }
  }
}

void checkSerial() {
  while (Serial.available() > 0) {
    int instruction = Serial.parseInt();
    if (instruction >= 0 && instruction < inst_num) {
      i_num = instruction;
      Serial.println("Instruction Set to");
      Serial.println(i_num);
      
      Serial.println("Layer Set To");
      cur_layer = 0;
      unsigned  layer_val = pgm_read_word_near(layers + cur_layer);
      while(layer_val != 0){
        if(i_num > layer_val){
          cur_layer++;
          layer_val = pgm_read_word_near(layers + cur_layer);
        }
      }
      Serial.println(cur_layer);
      
      moveTo(true, false, velocity);
    } else if (instruction == -1) {
     Serial.println("Center Servos");
      centerServos();
    } else if (instruction == -2) {
      playing_bounds = true;
      interrupt = true;
    }
  }
}

void loop() {
  int dist = 0;
  checkSerial();

  if (!interrupt) {
    checkFob();
  }

  if (interrupt) {


    if (flags[0]) {
      flags[0] = false;
      Serial.println("n");
      playing = false;
      playing_bounds = false;
      advanceIndex();
      moveTo(true, false, velocity);

    } else if (flags[1]) {
      flags[1] = false;

      Serial.println("v");
      playing = false;
      playing_bounds = false;
      retractIndex();
      moveTo(false, false, velocity);

    } else if (flags[2]) {
      flags[2] = false;

      Serial.println("p");
      playing = !playing;
      playing_bounds = false;
    } else if (flags[3]) {
      flags[3] = false;

      Serial.println("b");
      playing = false;
      playing_bounds = true;
    }


    interrupt = false;
  }

  if (playing) {
    advanceIndex();
    moveTo(true, true, velocity);
  }

  if (playing_bounds) {
    moveToBound();
  }

}








