//// Values generated for Filename: thatgun_800.gcode
//////////////////
//Laura Devendorf
//Being the Mahcine
//Arduino Uno Code for Guided 3D Printing
//Generated: 8/1/14 - 10:24am
////////////////

#include <Servo.h>
#include <avr/pgmspace.h>

///**BEGIN INSERTED VALUES/////
int inst_num = 2105;
const PROGMEM uint8_t xs[] = {6,61,61,62,64,104,105,105,106,107,108,110,110,110,110,110,109,109,108,107,106,69,63,62,61,60,59,59,58,58,57,57,57,57,58,58,58,58,60,60,61,65,65,103,104,104,70,68,64,64,64,64,69,69,71,75,76,80,81,85,86,90,91,95,97,100,101,69,69,67,67,66,66,66,98,98,97,67,66,60,60,130,106,106,106,106,104,62,62,61,62,61,62,103,105,105,94,94,94,90,89,85,84,80,79,75,74,70,70,65,65,66,66,98,98,98,98,64,63,62,62,60,53,53,60,63,63,64,37,37,32,29,22,19,18,15,14,13,13,13,15,17,26,27,27,27,28,30,32,33,34,32,33,37,37,61,61,61,62,103,106,105,105,105,108,108,105,104,101,101,99,97,99,101,101,101,99,99,98,97,97,67,67,67,65,65,72,72,72,74,74,81,81,82,82,87,87,89,89,87,87,66,65,108,108,134,136,33,33,30,32,30,9,6,6,16,16,24,25,28,30,30,29,29,29,23,21,21,18,17,16,59,59,59,56,56,67,67,68,69,70,72,72,74,75,77,78,79,80,82,83,85,85,87,88,90,90,92,93,95,96,96,67,67,67,62,62,62,62,62,61,61,61,71,105,105,105,105,103,102,101,101,101,103,108,193,194,195,194,193,188,188,186,70,60,54,43,40,41,41,42,42,44,45,46,48,49,51,52,52,51,49,48,48,48,49,51,52,53,53,59,62,62,65,65,87,89,91,89,87,65,63,65,106,106,105,106,107,108,109,109,109,108,106,114,114,117,117,120,146,148,148,151,165,165,171,171,165,165,114,114,52,52,52,52,51,50,47,45,44,43,42,42,32,29,28,27,27,27,27,27,28,28,30,38,38,30,26,25,24,22,22,20,17,16,14,11,10,8,8,7,6,25,26,27,26,28,29,30,32,32,32,33,34,35,36,39,38,38,38,40,41,44,45,48,49,48,48,48,48,48,49,50,51,52,65,65,67,96,107,107,106,105,105,104,62,60,61,66,66,98,87,87,67,65,64,64,89,110,110,109,110,110,183,183,184,184,110,110,108,108,108,110,110,106,106,106,105,104,101,101,100,96,95,91,90,86,85,81,80,76,74,71,70,66,65,61,61,57,56,59,56,59,56,56,57,57,101,101,105,105,118,118,116,118,116,118,116,116,118,118,187,187,187,189,190,192,192,122,122,147,150,150,153,162,162,167,162,162,122,122,48,48,48,50,51,51,56,56,56,56,56,55,44,44,45,47,47,11,11,23,23,22,26,26,27,29,29,29,31,31,32,34,35,35,35,35,37,39,44,45,45,45,45,44,45,45,47,49,48,45,42,41,40,39,39,33,32,30,30,30,31,42,40,30,28,26,24,24,22,20,19,17,14,13,12,11,11,9,9,16,17,23,23,23,23,25,28,29,28,31,35,34,37,41,41,41,44,50,52,52,53,57,58,61,66,69,104,104,106,107,108,109,111,112,112,113,113,114,117,117,120,146,152,167,167,167,167,105,105,105,105,105,60,60,60,62,62,66,65,87,86,91,87,62,62,62,62,62,89,98,98,101,101,101,100,98,98,94,62,62,62,62,60,60,81,101,101,101,101,188,188,186,186,71,54,37,38,38,39,40,41,41,42,43,44,45,45,46,42,42,42,42,42,33,31,27,25,25,25,25,23,21,21,16,13,10,7,6,4,4,22,65,65,96,97,100,87,87,65,65,90,90,91,97,108,108,107,105,101,94,83,72,64,58,54,54,36,36,34,35,34,31,26,130,130,130,132,132,133,134,135,147,149,150,170,179,179,179,170,171,171,181,182,194,194,194,171,169,48,48,48,44,44,68,68,70,76,77,82,82,70,70,65,65,65,59,59,64,64,66,69,72,74,77,80,83,85,88,91,94,96,99,101,101,64,60,60,106,106,107,108,106,106,106,106,185,185,106,106,108,108,108,112,108,112,108,111,112,114,120,120,148,153,164,164,114,114,27,27,27,7,24,25,25,28,32,31,34,38,38,38,38,40,41,41,41,47,48,48,48,48,48,48,50,50,51,53,52,56,55,55,57,57,59,59,58,59,57,57,57,57,55,55,49,49,42,42,43,44,45,46,47,47,48,49,52,52,50,50,48,48,47,45,45,32,30,28,28,28,30,32,31,29,26,25,23,18,16,13,10,7,6,6,24,29,28,30,35,34,37,41,41,41,43,50,52,52,53,56,59,62,64,65,69,104,107,109,112,117,117,120,147,152,168,168,169,169,168,168,105,105,60,60,61,64,65,98,98,98,98,98,98,98,98,62,62,62,62,60,60,68,66,78,78,91,101,101,189,189,187,182,181,181,178,177,177,71,54,35,37,39,40,42,44,45,41,41,33,31,27,25,24,24,23,20,15,12,9,6,3,5,65,65,87,87,91,87,87,65,64,63,62,63,64,64,80,80,82,99,116,116,117,121,148,170,172,178,180,181,184,184,173,172,172,172,173,185,195,195,194,172,170,108,108,107,105,101,93,83,72,64,57,53,54,66,66,64,64,66,69,73,34,34,30,26,94,94,94,95,95,93,93,93,109,109,115,116,120,120,148,153,164,164,109,109,65,65,69,70,79,79,91,105,105,185,185,180,179,179,72,65,65,60,60,71,71,71,72,74,75,75,65,65,59,59,65,65,106,106,7,7,23,25,24,28,31,31,34,38,38,41,47,49,49,50,53,51,57,57,61,65,67,87,86,90,92,92,90,88,86,86,58,58,58,58,57,57,55,55,54,40,41,43,45,47,51,45,45,31,30,28,28,27,25,23,18,15,12,9,7,5,5,24,29,28,30,34,34,36,40,41,41,43,49,52,52,53,57,64,104,106,110,112,114,113,114,117,117,120,147,152,168,168,168,105,105,105,60,60,61,61,62,62,61,61,60,60,101,101,101,189,189,189,187,71,53,51,36,37,38,39,40,41,42,43,43,44,44,45,41,41,32,30,26,24,24,24,22,20,15,12,9,6,2,5,63,63,70,86,85,91,88,85,86,66,66,65,63,65,65,96,97,100,102,102,102,100,64,64,64,64,87,88,88,90,98,100,97,97,90,89,128,128,129,130,130,149,170,180,180,180,170,170,170,171,182,183,195,195,194,173,170,35,35,32,35,32,32,30,25,109,109,109,108,108,108,108,105,105,186,186,107,107,105,105,105,105,109,109,109,113,114,114,121,121,148,154,164,164,111,111,111,111,111,109,109,68,68,71,82,82,83,82,82,70,68,69,69,72,74,77,80,83,85,88,91,93,96,99,101,101,69,66,63,60,60,106,106,106,107,107,38,38,38,38,38,33,33,33,31,31,31,26,26,26,25,25,25,7,7,23,24,24,23,25,27,28,29,29,29,29,30,32,33,34,35,35,36,36,35,35,36,39,42,44,47,48,48,50,50,49,57,57,58,58,58,58,58,58,57,57,55,55,54,51,41,41,42,43,43,44,46,46,47,48,50,46,46,44,44,31,29,28,27,27,27,31,30,27,27,25,22,17,15,12,9,7,7,51,51,61,61,61,61,61,61,60,60,74,105,105,101,101,101,101,196,196,197,196,196,190,190,189,188,70,65,53,50,45,41,39,40,41,42,43,44,49,51,51,51,50,50,50,51,51,42,42,41,40,40,40,40,39,31,28,27,26,26,26,27,28,37,38,41,46,43,62,62,63,64,64,87,88,91,88,85,85,86,87,64,66,66,66,64,63,62,103,103,109,111,112,111,109,103,115,115,117,117,120,147,152,166,166,170,170,170,170,166,166,115,115,46,46,45,42,41,34,28,27,25,22,21,20,16,14,13,10,9,7,7,7,7,21,23,23,24,26,27,28,28,29,30,31,33,33,35,35,35,35,34,34,36,38,42,44,46,88,88,91,89,92,92,64,64,64,67,87,87,98,98,95,65,61,61,61,62,64,68,85,102,105,129,129,129,130,131,149,30,30,26,24,54,54,54,59,55,59,59,46,46,49,50,50,54,53,55,55,54,50,46,43,44,45,46,46,30,30,38,39,38,37,37,37,37,36,32,31,29,29,29,67,67,67,73,68,73,78,78,82,84,84,81,81,79,76,73,70,68,65,63,60,60,56,56,56,59,59,54,54,81,81,84,86,89,92,95,97,100,102,105,105,118,118,117,118,117,118,117,117,118,118,118,189,189,189,191,192,194,194,109,109,185,185,186,186,110,110,109,109,122,122,149,154,163,163,167,167,163,163,122,122,20,20,20,9,9,10,10,19,20,19,21,24,24,25,25,26,27,29,30,31,31,32,31,31,33,37,40,39,38,33,28,28,26,23,23,23,19,16,16,13,12,10,10,10,10,58,58,74,73,71,68,65,62,58,58,67,67,64,68,64,85,86,88,99,99,95,71,68,61,61,51,51,60,64,66,67,73,87,103,103,103,100,96,97,98,98,98,98,87,61,61,104,104,106,111,112,113,106,106,105,105,104,101,100,26,26,7,4,4,90,90,90,95,95,71,84,83,85,86,86,87,88,87,71,71,67,67,67,65,65,60,60,60,60,60,57,57,57,57,55,55,68,68,71,72,75,75,77,80,82,82,86,88,89,91,93,94,95,86,86,75,75,69,69,68,68,68,68,71,71,68,68,65,65,67,67,67,66,63,62,62,62,62,62,62,66,67,69,74,85,87,102,102,103,103,104,104,104,104,102,100,87,79,68,89,89,89,94,96,101,101,101,101,101,65,65,68,70,74,86,88,98,98,85,87,86,79,68,67,65,65,65,65};
const PROGMEM uint8_t ys[] = {46,114,114,114,114,114,114,114,114,115,116,120,121,122,129,131,132,132,133,134,134,137,137,137,136,136,135,134,131,130,130,129,122,121,121,120,120,119,116,115,115,120,120,120,123,128,128,131,131,129,122,120,123,123,125,123,125,123,125,123,125,123,125,123,125,123,123,123,123,126,126,127,127,121,121,127,129,129,128,138,138,138,132,132,119,119,116,116,116,132,135,135,135,134,134,132,126,126,126,125,126,125,126,125,126,125,126,125,125,119,119,118,117,117,118,120,124,124,124,124,132,132,132,119,119,119,119,119,91,91,91,90,95,90,89,81,78,70,69,65,65,67,66,67,68,68,71,75,76,78,79,83,87,90,91,113,113,113,113,113,116,116,128,135,136,138,138,136,136,134,134,133,132,132,136,138,138,136,136,133,133,133,133,138,138,137,133,133,136,137,133,133,136,137,133,133,136,137,133,127,127,128,127,138,138,138,138,51,51,49,46,49,55,54,53,70,70,69,72,77,79,79,82,87,86,90,88,87,80,78,70,122,122,122,129,129,121,121,119,121,119,121,119,121,119,121,119,121,119,121,119,121,119,121,119,121,119,121,119,121,119,119,121,121,121,120,120,129,128,135,135,141,142,142,142,141,139,137,137,137,137,132,130,130,130,130,131,133,135,137,137,148,150,150,149,148,146,145,142,142,140,139,137,135,134,134,134,134,134,127,127,127,127,125,124,123,123,123,117,116,116,116,120,126,126,126,127,128,129,130,130,128,126,108,108,107,105,105,105,107,111,112,111,109,110,110,113,112,113,113,111,111,107,107,112,112,115,121,126,126,110,103,103,105,106,107,108,110,112,113,115,118,122,128,123,120,118,114,112,110,109,109,109,108,106,103,104,102,101,102,101,101,98,95,92,90,82,77,71,61,58,54,49,53,56,57,59,60,62,63,67,68,70,70,74,75,76,79,81,83,84,86,87,87,88,89,90,92,93,95,96,99,101,102,103,133,133,135,135,128,128,126,116,112,111,111,112,114,115,115,115,120,120,120,118,124,124,123,126,126,116,133,133,133,138,138,146,146,140,140,140,138,138,134,134,134,134,132,132,145,145,146,145,146,145,146,145,146,145,146,145,146,145,146,145,146,145,145,134,130,127,125,122,120,120,134,134,145,145,146,146,123,123,122,120,119,117,116,116,123,123,132,132,132,134,132,134,134,117,117,117,114,114,110,110,115,115,120,122,122,117,137,137,137,137,137,139,139,139,140,140,145,145,143,142,141,139,138,59,59,55,56,58,61,61,64,65,67,70,72,73,75,77,78,78,80,85,86,89,90,90,90,92,93,96,97,101,103,105,105,107,110,112,114,117,120,124,122,117,114,112,111,109,99,100,99,98,98,98,96,93,91,88,81,76,70,60,59,56,56,55,53,53,53,49,49,48,52,53,55,59,61,66,72,75,75,80,84,87,95,97,101,104,102,102,102,106,106,106,103,102,103,104,106,107,108,109,109,110,113,112,113,113,107,107,127,128,130,130,111,110,110,110,110,110,115,115,121,117,114,114,117,120,121,121,121,125,125,125,125,125,126,126,127,129,129,129,129,129,129,132,132,137,137,142,142,142,140,138,137,137,150,152,152,152,150,148,145,145,143,142,140,139,138,137,135,134,133,130,130,127,125,124,122,128,129,124,118,112,110,107,105,103,102,96,90,83,71,68,58,54,49,137,137,138,138,136,133,133,134,133,113,113,114,114,100,100,98,89,83,80,77,77,79,83,88,91,49,49,47,44,47,48,47,108,108,109,108,108,108,108,108,108,108,106,107,107,111,111,112,119,119,119,118,128,128,129,129,126,131,131,131,128,128,119,119,118,117,118,117,117,118,118,105,105,105,106,106,145,145,148,145,148,145,148,145,148,145,148,145,148,145,148,145,145,145,147,148,107,107,106,106,107,107,140,140,140,149,149,141,128,128,128,125,122,119,115,113,113,114,121,117,117,110,110,126,126,115,106,106,106,57,52,54,55,62,63,67,74,77,79,80,83,84,86,86,86,89,92,92,93,95,96,99,101,101,102,105,106,110,110,115,115,118,118,121,122,123,123,134,134,140,140,146,145,146,145,144,142,141,140,138,137,136,134,134,134,128,127,127,127,127,125,125,117,125,122,118,112,109,108,107,104,104,102,102,100,94,89,82,70,57,53,53,48,53,55,59,61,66,72,74,75,80,84,87,94,97,101,104,101,100,99,100,106,106,102,104,107,113,112,114,114,107,107,117,117,122,122,128,128,110,110,114,114,115,113,113,116,119,119,121,121,124,128,128,128,128,138,138,142,142,139,139,142,142,142,139,139,151,153,153,154,155,155,154,153,153,151,149,145,142,140,137,134,131,131,123,128,129,124,118,112,107,105,102,96,90,83,71,54,53,132,132,132,132,133,135,135,135,135,134,133,133,132,132,139,139,139,138,108,108,109,110,108,107,110,110,107,107,116,116,117,116,120,120,122,123,127,127,128,128,126,101,101,98,90,83,80,77,77,79,83,88,92,97,97,95,94,89,86,85,47,47,47,46,117,117,117,123,123,117,117,117,111,111,118,117,121,117,117,110,110,125,125,112,145,145,145,147,147,145,146,146,142,142,149,149,150,149,149,149,146,148,148,141,141,141,143,141,143,143,106,106,106,106,106,106,107,107,56,56,52,53,55,62,63,66,74,77,81,86,89,95,98,102,105,106,111,118,118,119,117,117,118,119,119,120,120,121,122,125,125,125,125,134,134,141,141,148,148,146,144,141,138,136,128,128,117,125,122,118,112,106,103,100,94,89,81,70,57,53,53,48,52,54,59,61,66,72,74,75,80,84,87,94,97,101,105,106,106,104,105,108,109,109,110,113,112,114,114,107,107,130,132,132,130,110,110,115,115,125,125,132,132,138,138,142,142,137,136,136,137,151,152,152,151,151,148,145,144,142,141,140,139,137,136,135,134,131,131,123,128,129,124,118,112,107,105,102,96,90,82,71,54,53,120,120,114,114,117,120,122,123,125,125,123,122,120,138,138,138,138,136,128,128,131,132,131,130,134,134,134,124,124,125,125,125,114,114,114,113,108,108,109,108,109,108,108,107,112,112,112,118,118,120,119,118,128,128,130,130,127,49,49,46,44,46,46,47,46,121,121,121,126,126,129,129,139,139,139,149,149,141,141,141,141,140,113,113,113,115,114,114,121,117,117,111,111,128,128,125,124,122,120,119,113,120,120,117,117,119,120,121,122,122,120,146,146,149,146,149,146,149,146,149,146,149,146,149,146,146,146,148,146,148,148,107,107,107,107,107,84,84,84,76,76,72,72,72,66,66,66,57,57,57,53,53,53,56,56,51,56,56,57,59,61,62,63,64,67,68,71,74,74,75,76,77,77,79,81,84,86,87,88,88,89,95,98,103,103,104,111,118,118,129,129,129,129,134,134,141,141,148,148,147,146,145,144,143,142,140,139,137,136,135,127,127,124,124,117,125,122,118,112,111,111,107,106,106,106,103,100,94,89,81,70,61,56,117,117,117,120,120,124,124,136,136,141,141,141,137,137,135,133,131,131,133,134,135,137,137,148,150,151,151,150,149,149,148,146,145,143,140,140,138,136,135,135,128,127,125,124,123,121,117,112,112,114,118,119,119,120,124,128,123,123,118,117,112,111,109,108,108,108,108,112,129,129,128,127,127,127,127,129,130,132,132,133,137,137,133,132,132,130,130,129,115,115,113,113,115,117,118,116,110,110,113,112,114,114,107,107,113,113,113,117,118,122,126,126,111,89,89,91,94,98,101,102,102,102,101,100,99,95,90,89,81,79,70,67,63,52,48,56,57,59,61,62,63,67,68,71,73,74,75,76,77,77,78,81,84,86,87,88,88,89,133,133,136,138,124,124,124,119,119,121,120,119,114,114,115,115,115,115,113,113,113,112,110,110,110,108,108,109,108,109,108,47,47,48,46,119,119,119,122,125,129,129,139,139,138,138,140,140,141,143,146,146,145,144,144,142,141,139,139,112,112,111,111,112,118,119,119,119,122,124,122,117,113,113,130,130,130,130,134,135,130,135,131,135,135,145,145,147,145,147,145,147,145,147,145,145,135,135,135,134,134,132,132,145,145,147,145,147,145,147,145,147,145,147,147,124,124,122,121,119,118,116,116,124,124,124,134,134,134,134,134,134,134,135,135,135,138,138,147,147,140,140,136,117,117,117,111,111,116,116,117,121,123,123,118,52,52,52,54,54,57,57,54,56,57,61,63,65,65,67,69,72,76,77,78,78,78,81,85,88,91,91,92,96,98,99,99,98,98,98,97,93,89,88,80,78,69,67,63,58,143,143,143,147,149,149,149,147,145,144,139,139,133,133,129,129,133,133,133,133,139,139,139,133,133,133,120,120,121,116,115,115,112,112,113,116,116,116,117,119,123,125,125,125,125,133,118,118,129,130,130,127,129,129,131,135,137,138,136,47,47,53,52,51,122,122,122,118,118,120,118,117,116,116,118,119,120,122,122,121,120,120,120,122,122,122,122,122,122,122,123,123,123,123,130,130,136,136,135,135,135,135,132,135,132,132,136,135,136,135,136,135,135,136,136,135,135,136,136,136,146,146,147,146,146,146,146,146,146,133,133,133,133,132,131,130,128,126,124,123,120,120,119,118,117,116,116,118,120,122,123,127,128,129,135,135,135,135,134,128,128,128,130,128,131,131,123,123,123,125,125,123,123,122,120,120,120,125,125,129,132,131,130,130,129,128,126,125};
const PROGMEM uint8_t ls[] = {0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,0,1,0,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,0,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,0,1,0,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
const PROGMEM uint8_t bx[] = {6,193,193,6};
const PROGMEM uint8_t by[] = {46,46,153,153};
const PROGMEM uint16_t layers[] = {72,110,266,625,963,1242,1560,1918,2047,2106,0};
///**END INSERTED VALUES/////


//ENVIRONMENT VARS
int lastms_x = 100;
int lastms_y = 100;
int last_laser = false;
int i_num = 0;
boolean playing = false;
boolean playing_bounds = false;
int rate = 50;
int velocity = 50;
int cur_layer = 0;


//INPUT
const int next = 3;
const int play = 5;
const int prev = 4;
const int num_buttons = 3;
int buttonState = 0;
int low_count[num_buttons];
boolean flags[num_buttons];
boolean interrupt = false;

//OUTPUT
const int speaker = 7;
int tones[] = {261, 277, 294, 311, 330, 349, 370, 392, 415, 440};


//LASER PARAMS
int fast_blink = 50;
int slow_blink = 100;
int ison = 0;
const int laser = 12;



//SERVO PARAMS
int minPulse = 1400;
Servo servo_x;
Servo servo_y;


void setup()
{

  // Attach each Servo object to a digital pin
  servo_x.attach(9, 600, 2400);
  servo_y.attach(10, 600, 2400);


  for (int i =  0; i < num_buttons; i++) {
    low_count[i] = 0;
  }

  pinMode(next, INPUT);
  pinMode(prev, INPUT);
  pinMode(play, INPUT);
  pinMode(laser, OUTPUT);

  centerServos();
  Serial.begin(9600);
}



void centerServos() {
  digitalWrite(laser, HIGH);
  servo_x.writeMicroseconds(1500);
  servo_y.writeMicroseconds(1500);
}

void signalEnd() {
  for (int i = 0; i < 10; i++) {
    digitalWrite(laser, LOW);
    myDelay(fast_blink);
    digitalWrite(laser, HIGH);
    myDelay(slow_blink);
  }
}

void signalPath() {
  //  for(int i = 0; i < 2; i++){
  //   tone(speaker, tones[4]);
  //   delay(100);
  //   noTone(speaker);
  //  }

  for (int i = 0; i < 4; i++) {
    digitalWrite(laser, LOW);
    myDelay(slow_blink);
    digitalWrite(laser, HIGH);
    myDelay(slow_blink);
  }
}


void signalLayer(boolean up) {
  if (up) {
    for (int i = 6; i < 10; i++)
    {
      tone(speaker, tones[i]);
      delay(100);
    }
  } else {
    for (int i = 9; i == 6; i--)
    {
      tone(speaker, tones[i]);
      delay(100);
    }
  }
  noTone(speaker);
}

//update this to read actual bounds
void moveToBound() {
  int ms_x = 0;
  int ms_y = 0;
  int counter = 0;
  int index;

  while (!interrupt) {
    counter++;
    index = counter % 4;

    if (index == 0) {
      ms_x = minPulse;
      ms_y = minPulse;
    } else if (index == 1) {
      ms_x = minPulse + 200;
      ms_y = minPulse;
    } else if (index == 2) {
      ms_x = minPulse + 200;
      ms_y = minPulse + 200;
    } else {
      ms_x = minPulse;
      ms_y = minPulse + 200;
    }

    digitalWrite(laser, LOW);
    servo_x.writeMicroseconds(ms_x);
    servo_y.writeMicroseconds(ms_y);
    myDelay(1000);
  }

}

int distance(int x, int y) {
  return sqrt(x * x  + y * y);
}

void myDelay(int time) {
  int i = 0;
  boolean hasValue = false;
  while (i < time) {
    if (!interrupt) checkButtons();
    i += rate;
  }
}

void moveTo(boolean forward, boolean smooth, int velocity) {
  Serial.println(i_num);

  unsigned int lval = pgm_read_byte_near(ls + i_num);
  unsigned int xval = pgm_read_byte_near(xs + i_num);
  unsigned int yval = pgm_read_byte_near(ys + i_num);
  unsigned int layer_val = pgm_read_byte_near(ys + cur_layer);


  if (forward && layer_val != 0 && layer_val == i_num) {
    signalLayer(true);
    cur_layer++;
  }
  
   if (!forward && layer_val != 0 && layer_val == (i_num+1)) {
    signalLayer(false);
    cur_layer--;
  }


  int dist = distance(xval - lastms_x, yval - lastms_y);

  if (i_num > 0 && last_laser == 0 && lval == 1) {
    signalPath();
    digitalWrite(laser, LOW);

    //hold at this step
    if (forward) i_num--;
    else i_num++;
    last_laser = lval;
    return;
  }

  if (lval == 1) digitalWrite(laser, LOW);
  else digitalWrite(laser, HIGH);


  if (!smooth || lval == 0) {
    servo_x.writeMicroseconds(xval + minPulse);
    servo_y.writeMicroseconds(yval + minPulse);
    myDelay(100);
  } else {

    int dx = lastms_x - xval;
    dx = abs(dx); //arduino doesn't like subtraction in absolute value brackets
    int dy = lastms_y - yval;
    dy = abs(dy);
    int x_step = 1;
    int y_step = 1;

    if (lastms_x > xval) x_step = -1;
    if (lastms_y > xval) y_step = -1;

    int max_d = dx;
    if (dx < dy) max_d = dy;

    for (int i = 0; i < max_d; i++) {
      if (i < dx) servo_x.writeMicroseconds(minPulse + lastms_x + i * x_step);
      if (i < dy) servo_y.writeMicroseconds(minPulse + lastms_y + i * y_step);
      delay(velocity);
    }

    servo_x.writeMicroseconds(xval + minPulse);
    servo_y.writeMicroseconds(yval + minPulse);
  }

  lastms_x = xval;
  lastms_y = yval;
  last_laser = lval;


}


void advanceIndex() {
  tone(speaker, tones[9]);
  delay(20);
  noTone(speaker);

  if (i_num < inst_num - 1) {
    ++i_num;
  } else {
    signalEnd();
  }
}

void retractIndex() {
  if (i_num > 0) {
    --i_num;
  } else {
    signalEnd();
  }
}

void checkButtons() {


  delay(rate);
  int states[num_buttons];
  int reset = 200;
  int setValue = false;
  states[0] = analogRead(next);
  states[1] = analogRead(prev);
  states[2] = analogRead(play);
  int lowest = 0;
  int low_val = states[0];

  //get the lowest value of the buttons
  for (int i = 1; i < num_buttons; i++) {
    if (states[i] < low_val) {
      low_val = states[i];
      lowest = i;
    }
  }

  for (int i = 0; i < num_buttons; i++) {
    if (i == lowest && low_val < 1) {

      if (low_count[i] == 0) {
        flags[i] = true;
        interrupt = true;
      } else if (low_count[i] == reset) {
        low_count[i] = 0;
      }
      low_count[i]++;


    } else {
      low_count[i] = 0;
    }
  }
}

void checkSerial() {
  while (Serial.available() > 0) {
    int instruction = Serial.parseInt();
    if (instruction >= 0 && instruction < inst_num) {
      i_num = instruction;
      Serial.println("Instruction Set to");
      Serial.println(i_num);
    } else if (instruction == -1) {
      centerServos();
    } else if (instruction == -2) {
      playing_bounds = true;
      interrupt = true;
    }
  }
}

void loop() {
  int dist = 0;
  checkSerial();

  if (!interrupt) {
    checkButtons();
  }

  if (interrupt) {


    if (flags[0]) {
      flags[0] = false;
      Serial.println("n");
      playing = false;
      playing_bounds = false;
      advanceIndex();
      moveTo(true, false, velocity);

    } else if (flags[1]) {
      flags[1] = false;

      Serial.println("v");
      playing = false;
      playing_bounds = false;
      retractIndex();
      moveTo(false, false, velocity);

    } else if (flags[2]) {
      flags[2] = false;

      Serial.println("p");
      playing = !playing;
      playing_bounds = false;
    } else if (flags[3]) {
      flags[3] = false;

      Serial.println("b");
      playing = false;
      playing_bounds = true;
    }


    interrupt = false;
  }

  if (playing) {
    advanceIndex();
    moveTo(true, true, velocity);
  }

  if (playing_bounds) {
    moveToBound();
  }

}








